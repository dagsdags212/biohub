[
  {
    "objectID": "tutorials/retrieving-biological-data/sections/refgenie.html",
    "href": "tutorials/retrieving-biological-data/sections/refgenie.html",
    "title": "How to use refgenie",
    "section": "",
    "text": "Refgenie is a command-line tool that can be used to download and manage reference genomes, and to build and manage custom genome assets. It also provides a Python interface for programmatic access to genome assets.\n\n\n\n\n\n\nflowchart LR\n  list[\"`**refgenie**\n  list`\"]\n  pull[\"`**refgenie**\n  pull`\"]\n  seek[\"`**refgenie**\n  seek`\"]\n  list --&gt; pull --&gt; seek\n\n\n\n\n\n\n\n\nInstallation\nRefgenie can be installed as a Python package using pip:\n# Install using pip.\npip install refgenie\n\n# Install using pipx.\npipx install refgenie\nor conda:\nconda install -c conda-forge refgenie\n\n# Use mamba/micromamba instead of conda\nmicromamba install refgenie\n\n\nCreate a config file\nrefgenie requires a configuration file that lists the resources in the form of a yaml file. For that you need to select a directory that will store the downloaded resources. The path to the config file is saved as the REFGENIE shell environment variable which will be used for initialization:\n# Path pointing to refgenie config file.\nexport REFGENIE=~/refs/config.yaml\n\n# Load the REFGENIE variable when launching a shell instance\necho \"export REFGENIE=~/refs/config.yml\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Run initialization\nrefgenie init\nThe refgenie tool is now ready to be used to download and manage reference genomes.\n\n\nUsing refgenie\nA list of pre-built assets from a remote server can be displayed with listr:\n\n! refgenie listr\n\nzsh:1: command not found: refgenie\n\n\nGenome data is fetched using the pull command:\nrefgenie pull hg38/bwa_index\nThe seek command displays the path of the downloaded file:\nrefgenie seek hg38/bwa_index\nList local genome assets:\nrefgenie list\nUse command substitution to store the genome path to a variable:\n# Retrieve the human reference genome\nrefgenie pull hg38/fasta\n\n# Save path of reference genome to a variable\nREF=$(refgenie seek hg38/fasta)\nThen use the resulting path in downstream tools:\n# Generate statistics for the human reference genome\nseqkit stats ${REF}\nSubscribe to the iGenomes server which hosts additional reference genomes and genome assets.\nrefgenie subscribe -s http://igenomes.databio.org/"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/retrieving_fastq.html",
    "href": "tutorials/retrieving-biological-data/sections/retrieving_fastq.html",
    "title": "How to get FASTQ data",
    "section": "",
    "text": "Publibashed FASTQ files are stored in the bashort Read Archive (SRA). Access to SRA can be diagrammed like so:\n\n\n\n\n\n\nflowchart LR\n  fq[\"`**FASTQ FILES**`\"]\n  srr[\"`**SRR number**`\"] --&gt; srr2[\"`Find URL and metadata\n  web, **bio**, **ffq**`\"]\n  sra[\"`**SRA**\n  bashort Read Archive`\"] --&gt; sra2[\"`Use SRR number\n  **fastq-dump**`\"] --&gt; fq\n  ensembl[\"`**Ensembl**\n  Sequence archive`\"] --&gt; ensembl2[\"`Find URL\n  **curl**, **wget**, **aria2**`\"]\n  com[\"`**Commercial**\n  Google, Amazon\n  Users pay to download`\"] --&gt; com2[\"`Custom tools\n  **gsutil**, **aws**`\"] --&gt; fq\n\n\n\n\n\n\n\nThe sratools suite from NCBI provides fastq-dump and fasterq-dump to download read data from SRA accessions. In later versions of sratools, fasterq-dump is the preferred tool for fetching read data as demonstrated below:\n# Store accession number and number of reads\nACC=SRR1553425\nN=10000\n\n# Create reads directory\nmkdir reads\n\n# Fetch reads from accession\nfasterq-dump --split-3 -X ${N} -O reads ${ACC}\nHowever this method is clunky and fragile, often failing to fetch the required data due to errors that are cryptically communicated to the user. An alternative method is to retrieve the URLs that point to the data and download locally using wget, curl or aria2. Use bio search to retrieve metadata on the SRA accession and parse using jq.\n\n! bio search SRR1553425 | jq -r '.[].fastq_url[]'\n\nhttps://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\nhttps://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\n\n\n\nUsing the SRA Explorer\nThe SRA Explorer is a web-based tool developed by Phil Lewis aimed to make SRA data more accessible. It allows you to search for datasets and view metadata. The link can be accessed here:\n\nhttps://sra-explorer.info/\n\n\n\nUsing the NCBI website\nYou can also visit NCBIâ€™s SRA repository here to download sequencing read data.\n\n\nHow to download multiple runs\nAll data from a project can be queried using bio search, parsed using csvcut, and concurrently downloaded using parallel or aria2c:\nThe project id encapsulates all the details in a sequencing experiment. Pass the project id as an argument to the bio search command to view the SRR accessions.\n# Access the project metadata and save as a CSV file\nbio search PRJNA257197 --csv &gt; project.csv\nThe truncated output is as follows:\n\n\nSRR1553426,SAMN02951957,EM110,,2015-06-05,Sierra Leone,Zaire ebolavirus,156165683;174523161,494259458,2446829,EM110.FCH9,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/006/SRR1553426/SRR1553426_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/006/SRR1553426/SRR1553426_2.fastq.gz']\",\"156 MB, 175 MB files; 2.4 million reads; 494.3 million sequenced bases\"\nSRR1553432,SAMN02951960,EM113,,2015-06-05,Sierra Leone,Zaire ebolavirus,36110922;36939803,97376524,482062,EM113.FCH9,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/002/SRR1553432/SRR1553432_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/002/SRR1553432/SRR1553432_2.fastq.gz']\",\"36 MB, 37 MB files; 0.5 million reads; 97.4 million sequenced bases\"\nSRR1553453,SAMN02951971,G3676.2,,2015-06-05,Sierra Leone,Zaire ebolavirus,1103336;1123617,3329364,16482,G3676.2_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/003/SRR1553453/SRR1553453_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/003/SRR1553453/SRR1553453_2.fastq.gz']\",\"1 MB, 1 MB files; 0.0 million reads; 3.3 million sequenced bases\"\nSRR1553457,SAMN02951973,G3677.2,,2015-06-05,Sierra Leone,Zaire ebolavirus,804421;797003,2334110,11555,G3677.2_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/007/SRR1553457/SRR1553457_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/007/SRR1553457/SRR1553457_2.fastq.gz']\",\"804 KB, 797 KB files; 0.0 million reads; 2.3 million sequenced bases\"\nSRR1553469,SAMN02951979,G3687.1,,2015-06-05,Sierra Leone,Zaire ebolavirus,2227541;2317710,6095552,30176,G3687.1_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/009/SRR1553469/SRR1553469_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/009/SRR1553469/SRR1553469_2.fastq.gz']\",\"2 MB, 2 MB files; 0.0 million reads; 6.1 million sequenced bases\"\n\n\nOnly the accession numbers are needed to download the reads. From the project file, we extract the first column corresponding to the accession, and use this as input to fastq-dump. The parallel tool enables us to simultaneously download multiple accession at once.\n# Extract the first column and download concurrently using parallel\n1cat project.csv | \\\n2    csvcut -c 1 | \\\n3    head -n 3 | \\\n4    parallel \"fastq-dump -F --split-files -O data {}\"\n\n1\n\nPrint to standard output.\n\n2\n\nFilter only the first column.\n\n3\n\nFilter first three rows.\n\n4\n\nDownload reads for each of the three accessions."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/genomepy.html",
    "href": "tutorials/retrieving-biological-data/sections/genomepy.html",
    "title": "Using genomepy",
    "section": "",
    "text": "How to use genomepy\ngenomepy is another tool designed for searching and downloading genomic data. It can be used to:\n\nsearch available data\nshow the available metadata\nautomatically download, preprocess\ngenerate optional aligned indexes\n\nCurrently, genomepy supports Ensembl, UCSC, NCBI, and GENCODE.\n\n\n\n\n\n\nflowchart LR\n  genomepy[\"`**genomepy**`\"]\n  commands{\"`**search**\n  **install**\n  **annotation**`\"}\n  storage[\"`files stored in\n  **$home/local/share/genomes**`\"]\n  \n  genomepy --&gt; commands --&gt; storage\n\n\n\n\n\n\n\nSee also: genomepy documentation\n\n\nInstallation\nInstall using micromamba:\nmicromamba install genomepy\nInstall using pip or pipx:\npipx install genomepy\n\n\nUsing genomepy\nUse the search command to query genomes by name or accession:\ngenomepy search ecoli &gt; ecoli_query_results.txt\nA genome index will be downloaded upon invoking the search command for the first time. Hence, the initial search may take a while depending on your connection speed. As seen from the log below, assembly summaries are fetched from multiple databases (GENCODE, UCSC, Ensembl, NCBI).\n05:28:31 | INFO | Downloading assembly summaries from GENCODE\n05:29:54 | INFO | Downloading assembly summaries from UCSC\n05:30:05 | INFO | Downloading assembly summaries from Ensembl\n05:30:43 | INFO | Downloading assembly summaries from NCBI, this will take a while...\ngenbank_historical: 73.0k genomes [00:06, 11.1k genomes/s]\nrefseq_historical: 85.6k genomes [00:05, 16.6k genomes/s]\ngenbank: 2.39M genomes [02:11, 18.1k genomes/s]\nrefseq: 378k genomes [00:28, 13.0k genomes/s] \nThe results look like so:\nname                 provider accession         tax_id annotation species                                  other_info                              \n                                                        n r e k   &lt;- UCSC options (see help)                                                       \nEcoliT22_2.0         NCBI     GCF_000247665.3      562     âœ“      Escherichia coli O157:H43 str. T22       BAYGEN                                  \nEcoli.O104:H4.LB226692_2.0 NCBI     GCA_000215685.3      562     âœ“      Escherichia coli O104:H4 str. LB226692   Life Technologies                       \nEcoli.O104:H4.01-09591_1.0 NCBI     GCA_000221065.2      562     âœ“      Escherichia coli O104:H4 str. 01-09591   Life Technologies                       \nEcoli_C227-11_1.0    NCBI     GCA_000220805.2      562     âœ“      Escherichia coli O104:H4 str. C227-11    PacBio                                  \necoli009             NCBI     GCA_900607665.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli006             NCBI     GCA_900607465.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli008             NCBI     GCA_900607535.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli017             NCBI     GCA_900608025.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli025             NCBI     GCA_900608175.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli022             NCBI     GCA_900608105.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli015             NCBI     GCA_900607975.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli013             NCBI     GCA_900607805.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL       \nEntries under the name field can be used to download the genome:\ngenomepy install ecoli009\nBy default, the downloaded genomes will be found in the ~/.local/share/genomes directory. For our example, the directory named ecoli009 contains the genome data and other relevant files:\n\n\n/home/dagsdags/.local/share/genomes\nâ””â”€â”€ ecoli009\n    â”œâ”€â”€ assembly_report.txt\n    â”œâ”€â”€ ecoli009.fa\n    â”œâ”€â”€ ecoli009.fa.fai\n    â”œâ”€â”€ ecoli009.fa.sizes\n    â”œâ”€â”€ ecoli009.gaps.bed\n    â””â”€â”€ README.txt\n\n1 directory, 6 files"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/genbank.html",
    "href": "tutorials/retrieving-biological-data/sections/genbank.html",
    "title": "Accessing Genbank",
    "section": "",
    "text": "GenBank is the NIH genetic sequence database, an annotated collection of publicly available DNA sequences. If your data has a GenBank accession number such as AF086833, use the bio fetch command. By default, data is printed to stdout. Override this behavior by specifying the output filename with the -o flag or redirect the output to a file with the &gt; operator.\n# Accession id pointing to the record.\n1ACC=AF086833\n\n# Specify output with a flag.\n2bio fetch ${ACC} --format fasta -o ${ACC}.fa\n\n# Redirect the output to a file.\n3bio fetch ${ACC} --format gff &gt; ${ACC}.gff\n\n1\n\nStore accesssion ID as a variable.\n\n2\n\nDownload the sequence (FASTA) file.\n\n3\n\nDownload the annotation (GFF) file.\n\n\nLet us verify the download by viewing the first ten lines of the annotation file:\n\n\n##gff-version 3\n#!gff-spec-version 1.21\n#!processor NCBI annotwriter\n##sequence-region AF086833.2 1 18959\n##species https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=128952\nAF086833.2  Genbank region  1   18959   .   +   .   ID=AF086833.2:1..18959;Dbxref=taxon:128952;gb-acronym=EBOV-May;gbkey=Src;mol_type=viral cRNA;strain=Mayinga\nAF086833.2  Genbank five_prime_UTR  1   55  .   +   .   ID=id-AF086833.2:1..55;Note=putative leader region;function=regulation or initiation of RNA replication;gbkey=5'UTR\nAF086833.2  Genbank gene    56  3026    .   +   .   ID=gene-NP;Name=NP;gbkey=Gene;gene=NP;gene_biotype=protein_coding\nAF086833.2  Genbank mRNA    56  3026    .   +   .   ID=rna-NP;Parent=gene-NP;gbkey=mRNA;gene=NP;product=nucleoprotein\nAF086833.2  Genbank exon    56  3026    .   +   .   ID=exon-NP-1;Parent=rna-NP;gbkey=mRNA;gene=NP;product=nucleoprotein"
  },
  {
    "objectID": "tutorials/rnaseq/index.html",
    "href": "tutorials/rnaseq/index.html",
    "title": "Retrieving Biological Data",
    "section": "",
    "text": "PubMed\nGEO\nBioconductor"
  },
  {
    "objectID": "tutorials/rnaseq/index.html#data-sources",
    "href": "tutorials/rnaseq/index.html#data-sources",
    "title": "Retrieving Biological Data",
    "section": "",
    "text": "PubMed\nGEO\nBioconductor"
  },
  {
    "objectID": "rosalind.html",
    "href": "rosalind.html",
    "title": "Rosalind Challenges",
    "section": "",
    "text": "Order By\n       Default\n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Title\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n\nDate\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\n2024-07-30\n\n\nFinding a Motif in DNA\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-29\n\n\nRabbits and Recurrence Relations\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-29\n\n\nComputing GC Content\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-29\n\n\nCounting Point Mutations\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-29\n\n\nIntroduction to Mendelian Inheritance\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-29\n\n\nTranslating RNA into Protein\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-28\n\n\nCounting DNA Nucleotides\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-28\n\n\nTranscribing DNA into RNA\n\n\nJan Emmanuel Samson\n\n\n\n\n2024-07-28\n\n\nComplementing a Strand of DNA\n\n\nJan Emmanuel Samson\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/ensembl.html",
    "href": "tutorials/retrieving-biological-data/sections/ensembl.html",
    "title": "BioHub",
    "section": "",
    "text": "How to access Ensembl\nEnsembl operates on numbered releases. For example, release 104 was published on March 30, 2021. Data can be retrieved by navigating the file tree in the provided FTP server. Alternatively, you can invoke curl, wget, or aria2c directly on each file.\n# Get the FASTA file from chromosome 22 of the human genome\nURL=http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gz\n\n# Use curl go download the data\n1curl ${URL} | gunzip -c &gt; refs/chr22.fa\n\n1\n\nDownload from URL and decompress the FASTA file."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/ncbi_datasets.html",
    "href": "tutorials/retrieving-biological-data/sections/ncbi_datasets.html",
    "title": "BioHub",
    "section": "",
    "text": "How to use NCBI datasets\nNCBI Datasets is a new resource designed by NCBI to gather data from across NCBI databases. The main entry point of the tool is the datasets command. Subcommands such as download or summary is then specified, followed by more subcommands to specify your query.\nIt seems to be the direction that NCBI wants to shepherd users towards. However, the nested structure of running the tool makes its use complicated and convoluted compared to other resources. NCBI is kind enough to give us a diagram for navigating the subcommands:\n\n\n\nSwiftwater hydra (Hydra vulgaris) has a taxonomy id of 6087 and RefSeq id of GCF_038396675.1. We can download its genome by running the following:\ndatasets download genome accession GCF_038396675.1\nBy default, genome is downloaded as a zipped file named ncbi_dataset. The structure of the directory is seen below.\nncbi_dataset\nâ””â”€â”€ data\n    â”œâ”€â”€ assembly_data_report.jsonl\n    â”œâ”€â”€ dataset_catalog.json\n    â””â”€â”€ GCF_038396675.1\n        â””â”€â”€ GCF_038396675.1_HydraT2T_AEP_genomic.fn"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/overview.html",
    "href": "tutorials/retrieving-biological-data/sections/overview.html",
    "title": "Sources of biological data",
    "section": "",
    "text": "What are databases?\nDatabases are organized collections of structured information retrieved from various sources such as experiments, sensors, telemetry data and publications, to name a few. Information within the database is physically stored in computer systems and a set of programs manage how data flows in and out of the database. A server actively listens for requests sent by other computers to access the data. Upon validation, the server retrieves the data from the database and sends the data (response) to the requesting computer (or client).\nBiological databases\nIn biology, high-throughput experiments had led to the generation of data in the scale of petabytes. An organizational scheme is needed to easily retrieve the data used for the generation of actionable insights, which is the ultimate goal of any analysis. Biological databases contain data generated from experiments in the fields as genomics, proteomics, metabolomics, epigenetics, and many more. Each data point reflects a particular attribute of a biological entity such as the function of a gene, structure of a protein, expression of a transcript, localization of mutation, etc.\nWhy should I care?\nPrior to any analysis, data pertinent to the research question must first be collected in a useable form. Retrieving data may be as simple a going to NCBI, searching for a particular accession or query, and clicking a button to download a file in a specific format (e.g., FASTA, GFF). However, this approach is not scalable when attempting to process largescale data. As such, bioinformaticians have developed infrastructure for streamlining the process of data collection, allowing researchers from all backgrounds to retrieve the information they require in a straighforward manner.\nThe aim of this write-up is to introduce you to a few command-line-based tools for downloading biological data."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/overview.html#how-to-get-genome-data",
    "href": "tutorials/retrieving-biological-data/sections/overview.html#how-to-get-genome-data",
    "title": "Sources of biological data",
    "section": "How to get genome data",
    "text": "How to get genome data\nData is distributed via various repositories. The most commonly used ones are:\n\n\n\n\n\n\nflowchart LR\n  1A[\"`**NCBI**\n  Genbank/RefSeq`\"]\n  1B[\"`Use numbers\n  **bio, efetch**`\"]\n  \n  2A[\"`**Ensembl**\n  **UCSC**\n  **FlyBase, WormBase**\n  Releases`\"]\n  2B[\"`Use URL\n  **curl, wget, aria2**\n  **genomepy, refgenie**`\"]\n  \n  3A[\"`**NCBI Assemblies**\n  RefSeq genomes`\"]\n  3B[\"`Use accession\n  **datasets**`\"]\n  \n  4A[\"`**Independent\n  Data Tools**`\"]\n  4B[\"`**genomepy**\n  **refgenie**`\"]\n  \n  5[\"`**File Formats**\n  FASTA, GFF, GTF, BED`\"]\n  \n  1A --&gt; 1B --&gt; 5\n  2A --&gt; 2B --&gt; 5\n  3A --&gt; 3B --&gt; 5\n  4A --&gt; 4B --&gt; 5\n\n\n\n\n\n\n\nIn addition, there are software packages such as refgenie and genomepy that can be used to download and manage reference genomes.\n\nSearch for metadata\nThe bio package is a CLI-based tool used for bioinformatics exploration. It contains commands for downloading, manipulating, and transforming sequence data. If you have an NCBI-based accession number, you can use the bio search command to get information on it.\n# Use a GenBank accession\n1bio search AF086833\n\n# Use an SRA accession\n2bio search SRR1553425\n\n# Use a RefSeq assembly ID\n3bio search GCA_000005845\n\n# Use a query string\nbio search ecoli\n\n1\n\nSearches GenBank\n\n2\n\nSearches SRA\n\n3\n\nSearches NCBI Genome\n\n\nRunning the bio search command will return a JSON-formatted string which contains the metadata for a particular record. Use the --csv flag to output the metadata in a comma-delimited format. Similarly, use the --csv if you want tab-delimited data.\nRunning bio search SRR1553425 would produce the following:\n\n\n[\n    {\n        \"run_accession\": \"SRR1553425\",\n        \"sample_accession\": \"SAMN02951957\",\n        \"sample_alias\": \"EM110\",\n        \"sample_description\": \"\",\n        \"first_public\": \"2015-06-05\",\n        \"country\": \"Sierra Leone\",\n        \"scientific_name\": \"Zaire ebolavirus\",\n        \"fastq_bytes\": \"111859282;119350609\",\n        \"base_count\": \"360534650\",\n        \"read_count\": \"1784825\",\n        \"library_name\": \"EM110_r1.ADXX\",\n        \"library_strategy\": \"RNA-Seq\",\n        \"library_source\": \"TRANSCRIPTOMIC\",\n        \"library_layout\": \"PAIRED\",\n        \"instrument_platform\": \"ILLUMINA\",\n        \"instrument_model\": \"Illumina HiSeq 2500\",\n        \"study_title\": \"Zaire ebolavirus Genome sequencing\",\n        \"fastq_url\": [\n            \"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\",\n            \"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\"\n        ],\n        \"info\": \"112 MB, 119 MB files; 1.8 million reads; 360.5 million sequenced bases\"\n    }\n]\n\n\nWe can then use the jq processing tool to extract fields of interest. Extract the fastq_url list by running:\n\n! bio search SRR1553425 | jq \".[].fastq_url[]\"\n\n\"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\"\n\"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\""
  },
  {
    "objectID": "tutorials/retrieving-biological-data/sections/url_download.html",
    "href": "tutorials/retrieving-biological-data/sections/url_download.html",
    "title": "BioHub",
    "section": "",
    "text": "Download via URL\nIf you know the URL of a resource, you may use wget or curl to download the file. First, save the URL to a variable for referencing:\nURL=http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gz\nUse curl:\ncurl ${URL} -o chr22.fa.gz\nOr use wget:\nwget -nc ${URL} -o chr22.fa.gz\nThe -nc flag would skip the download altogether if the file already exists. Use this flag to ensure that large files are not overwritten.\nFor large files, aria2 can be used for faster, multi-segmented downloads. The tool also supports checkpoints which allow you to restart interrupted downloads. Download aria2 from their website or use conda to install in an environment.\naria2c ${URL} \\ \n1  -x 5 \\\n2  -o chr22.fa.gz\n\n1\n\nConnect to the server with x connections.\n\n2\n\nSave the output to a file."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html",
    "href": "tutorials/retrieving-biological-data/index.html",
    "title": "Retrieving Biological Data",
    "section": "",
    "text": "What are databases?\nDatabases are organized collections of structured information retrieved from various sources such as experiments, sensors, telemetry data and publications, to name a few. Information within the database is physically stored in computer systems and a set of programs manage how data flows in and out of the database. A server actively listens for requests sent by other computers to access the data. Upon validation, the server retrieves the data from the database and sends the data (response) to the requesting computer (or client).\nBiological databases\nIn biology, high-throughput experiments had led to the generation of data in the scale of petabytes. An organizational scheme is needed to easily retrieve the data used for the generation of actionable insights, which is the ultimate goal of any analysis. Biological databases contain data generated from experiments in the fields as genomics, proteomics, metabolomics, epigenetics, and many more. Each data point reflects a particular attribute of a biological entity such as the function of a gene, structure of a protein, expression of a transcript, localization of mutation, etc.\nWhy should I care?\nPrior to any analysis, data pertinent to the research question must first be collected in a useable form. Retrieving data may be as simple a going to NCBI, searching for a particular accession or query, and clicking a button to download a file in a specific format (e.g., FASTA, GFF). However, this approach is not scalable when attempting to process largescale data. As such, bioinformaticians have developed infrastructure for streamlining the process of data collection, allowing researchers from all backgrounds to retrieve the information they require in a straighforward manner.\nThe aim of this write-up is to introduce you to a few command-line-based tools for downloading biological data."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html#sources-of-biological-data",
    "href": "tutorials/retrieving-biological-data/index.html#sources-of-biological-data",
    "title": "Retrieving Biological Data",
    "section": "",
    "text": "What are databases?\nDatabases are organized collections of structured information retrieved from various sources such as experiments, sensors, telemetry data and publications, to name a few. Information within the database is physically stored in computer systems and a set of programs manage how data flows in and out of the database. A server actively listens for requests sent by other computers to access the data. Upon validation, the server retrieves the data from the database and sends the data (response) to the requesting computer (or client).\nBiological databases\nIn biology, high-throughput experiments had led to the generation of data in the scale of petabytes. An organizational scheme is needed to easily retrieve the data used for the generation of actionable insights, which is the ultimate goal of any analysis. Biological databases contain data generated from experiments in the fields as genomics, proteomics, metabolomics, epigenetics, and many more. Each data point reflects a particular attribute of a biological entity such as the function of a gene, structure of a protein, expression of a transcript, localization of mutation, etc.\nWhy should I care?\nPrior to any analysis, data pertinent to the research question must first be collected in a useable form. Retrieving data may be as simple a going to NCBI, searching for a particular accession or query, and clicking a button to download a file in a specific format (e.g., FASTA, GFF). However, this approach is not scalable when attempting to process largescale data. As such, bioinformaticians have developed infrastructure for streamlining the process of data collection, allowing researchers from all backgrounds to retrieve the information they require in a straighforward manner.\nThe aim of this write-up is to introduce you to a few command-line-based tools for downloading biological data."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html#how-to-get-genome-data",
    "href": "tutorials/retrieving-biological-data/index.html#how-to-get-genome-data",
    "title": "Retrieving Biological Data",
    "section": "How to get genome data",
    "text": "How to get genome data\nData is distributed via various repositories. The most commonly used ones are:\n\n\n\n\n\n\nflowchart LR\n  1A[\"`**NCBI**\n  Genbank/RefSeq`\"]\n  1B[\"`Use numbers\n  **bio, efetch**`\"]\n  \n  2A[\"`**Ensembl**\n  **UCSC**\n  **FlyBase, WormBase**\n  Releases`\"]\n  2B[\"`Use URL\n  **curl, wget, aria2**\n  **genomepy, refgenie**`\"]\n  \n  3A[\"`**NCBI Assemblies**\n  RefSeq genomes`\"]\n  3B[\"`Use accession\n  **datasets**`\"]\n  \n  4A[\"`**Independent\n  Data Tools**`\"]\n  4B[\"`**genomepy**\n  **refgenie**`\"]\n  \n  5[\"`**File Formats**\n  FASTA, GFF, GTF, BED`\"]\n  \n  1A --&gt; 1B --&gt; 5\n  2A --&gt; 2B --&gt; 5\n  3A --&gt; 3B --&gt; 5\n  4A --&gt; 4B --&gt; 5\n\n\n\n\n\n\n\nIn addition, there are software packages such as refgenie and genomepy that can be used to download and manage reference genomes.\n\nSearch for metadata\nThe bio package is a CLI-based tool used for bioinformatics exploration. It contains commands for downloading, manipulating, and transforming sequence data. If you have an NCBI-based accession number, you can use the bio search command to get information on it.\n# Use a GenBank accession\n1bio search AF086833\n\n# Use an SRA accession\n2bio search SRR1553425\n\n# Use a RefSeq assembly ID\n3bio search GCA_000005845\n\n# Use a query string\nbio search ecoli\n\n1\n\nSearches GenBank\n\n2\n\nSearches SRA\n\n3\n\nSearches NCBI Genome\n\n\nRunning the bio search command will return a JSON-formatted string which contains the metadata for a particular record. Use the --csv flag to output the metadata in a comma-delimited format. Similarly, use the --csv if you want tab-delimited data.\nRunning bio search SRR1553425 would produce the following:\n\n\n[\n    {\n        \"run_accession\": \"SRR1553425\",\n        \"sample_accession\": \"SAMN02951957\",\n        \"sample_alias\": \"EM110\",\n        \"sample_description\": \"\",\n        \"first_public\": \"2015-06-05\",\n        \"country\": \"Sierra Leone\",\n        \"scientific_name\": \"Zaire ebolavirus\",\n        \"fastq_bytes\": \"111859282;119350609\",\n        \"base_count\": \"360534650\",\n        \"read_count\": \"1784825\",\n        \"library_name\": \"EM110_r1.ADXX\",\n        \"library_strategy\": \"RNA-Seq\",\n        \"library_source\": \"TRANSCRIPTOMIC\",\n        \"library_layout\": \"PAIRED\",\n        \"instrument_platform\": \"ILLUMINA\",\n        \"instrument_model\": \"Illumina HiSeq 2500\",\n        \"study_title\": \"Zaire ebolavirus Genome sequencing\",\n        \"fastq_url\": [\n            \"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\",\n            \"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\"\n        ],\n        \"info\": \"112 MB, 119 MB files; 1.8 million reads; 360.5 million sequenced bases\"\n    }\n]\n\n\nWe can then use the jq processing tool to extract fields of interest. Extract the fastq_url list by running:\n\n! bio search SRR1553425 | jq \".[].fastq_url[]\"\n\n\"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\"\n\"https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\"\n\n\n\n\nAccessing Genbank\nGenBank is the NIH genetic sequence database, an annotated collection of publicly available DNA sequences. If your data has a GenBank accession number such as AF086833, use the bio fetch command. By default, data is printed to stdout. Override this behavior by specifying the output filename with the -o flag or redirect the output to a file with the &gt; operator.\n# Accession id pointing to the record.\n1ACC=AF086833\n\n# Specify output with a flag.\n2bio fetch ${ACC} --format fasta -o ${ACC}.fa\n\n# Redirect the output to a file.\n3bio fetch ${ACC} --format gff &gt; ${ACC}.gff\n\n1\n\nStore accesssion ID as a variable.\n\n2\n\nDownload the sequence (FASTA) file.\n\n3\n\nDownload the annotation (GFF) file.\n\n\nLet us verify the download by viewing the first ten lines of the annotation file:\n\n\n##gff-version 3\n#!gff-spec-version 1.21\n#!processor NCBI annotwriter\n##sequence-region AF086833.2 1 18959\n##species https://www.ncbi.nlm.nih.gov/Taxonomy/Browser/wwwtax.cgi?id=128952\nAF086833.2  Genbank region  1   18959   .   +   .   ID=AF086833.2:1..18959;Dbxref=taxon:128952;gb-acronym=EBOV-May;gbkey=Src;mol_type=viral cRNA;strain=Mayinga\nAF086833.2  Genbank five_prime_UTR  1   55  .   +   .   ID=id-AF086833.2:1..55;Note=putative leader region;function=regulation or initiation of RNA replication;gbkey=5'UTR\nAF086833.2  Genbank gene    56  3026    .   +   .   ID=gene-NP;Name=NP;gbkey=Gene;gene=NP;gene_biotype=protein_coding\nAF086833.2  Genbank mRNA    56  3026    .   +   .   ID=rna-NP;Parent=gene-NP;gbkey=mRNA;gene=NP;product=nucleoprotein\nAF086833.2  Genbank exon    56  3026    .   +   .   ID=exon-NP-1;Parent=rna-NP;gbkey=mRNA;gene=NP;product=nucleoprotein\n\n\n\n\nDownload via URL\nIf you know the URL of a resource, you may use wget or curl to download the file. First, save the URL to a variable for referencing:\nURL=http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gz\nUse curl:\ncurl ${URL} -o chr22.fa.gz\nOr use wget:\nwget -nc ${URL} -o chr22.fa.gz\nThe -nc flag would skip the download altogether if the file already exists. Use this flag to ensure that large files are not overwritten.\nFor large files, aria2 can be used for faster, multi-segmented downloads. The tool also supports checkpoints which allow you to restart interrupted downloads. Download aria2 from their website or use conda to install in an environment.\naria2c ${URL} \\ \n1  -x 5 \\\n2  -o chr22.fa.gz\n\n1\n\nConnect to the server with x connections.\n\n2\n\nSave the output to a file.\n\n\n\n\nHow to use NCBI datasets\nNCBI Datasets is a new resource designed by NCBI to gather data from across NCBI databases. The main entry point of the tool is the datasets command. Subcommands such as download or summary is then specified, followed by more subcommands to specify your query.\nIt seems to be the direction that NCBI wants to shepherd users towards. However, the nested structure of running the tool makes its use complicated and convoluted compared to other resources. NCBI is kind enough to give us a diagram for navigating the subcommands:\n\n\n\nSwiftwater hydra (Hydra vulgaris) has a taxonomy id of 6087 and RefSeq id of GCF_038396675.1. We can download its genome by running the following:\ndatasets download genome accession GCF_038396675.1\nBy default, genome is downloaded as a zipped file named ncbi_dataset. The structure of the directory is seen below.\nncbi_dataset\nâ””â”€â”€ data\n    â”œâ”€â”€ assembly_data_report.jsonl\n    â”œâ”€â”€ dataset_catalog.json\n    â””â”€â”€ GCF_038396675.1\n        â””â”€â”€ GCF_038396675.1_HydraT2T_AEP_genomic.fn\n\n\nHow to access Ensembl\nEnsembl operates on numbered releases. For example, release 104 was published on March 30, 2021. Data can be retrieved by navigating the file tree in the provided FTP server. Alternatively, you can invoke curl, wget, or aria2c directly on each file.\n# Get the FASTA file from chromosome 22 of the human genome\nURL=http://ftp.ensembl.org/pub/release-104/fasta/homo_sapiens/dna/Homo_sapiens.GRCh38.dna.chromosome.22.fa.gz\n\n# Use curl go download the data\n1curl ${URL} | gunzip -c &gt; refs/chr22.fa\n\n1\n\nDownload from URL and decompress the FASTA file."
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html#how-to-use-refgenie",
    "href": "tutorials/retrieving-biological-data/index.html#how-to-use-refgenie",
    "title": "Retrieving Biological Data",
    "section": "How to use refgenie",
    "text": "How to use refgenie\nRefgenie is a command-line tool that can be used to download and manage reference genomes, and to build and manage custom genome assets. It also provides a Python interface for programmatic access to genome assets.\n\n\n\n\n\n\nflowchart LR\n  list[\"`**refgenie**\n  list`\"]\n  pull[\"`**refgenie**\n  pull`\"]\n  seek[\"`**refgenie**\n  seek`\"]\n  list --&gt; pull --&gt; seek\n\n\n\n\n\n\n\n\nInstallation\nRefgenie can be installed as a Python package using pip:\n# Install using pip.\npip install refgenie\n\n# Install using pipx.\npipx install refgenie\nor conda:\nconda install -c conda-forge refgenie\n\n# Use mamba/micromamba instead of conda\nmicromamba install refgenie\n\n\nCreate a config file\nrefgenie requires a configuration file that lists the resources in the form of a yaml file. For that you need to select a directory that will store the downloaded resources. The path to the config file is saved as the REFGENIE shell environment variable which will be used for initialization:\n# Path pointing to refgenie config file.\nexport REFGENIE=~/refs/config.yaml\n\n# Load the REFGENIE variable when launching a shell instance\necho \"export REFGENIE=~/refs/config.yml\" &gt;&gt; ~/.bashrc\nsource ~/.bashrc\n\n# Run initialization\nrefgenie init\nThe refgenie tool is now ready to be used to download and manage reference genomes.\n\n\nUsing refgenie\nA list of pre-built assets from a remote server can be displayed with listr:\n\n! refgenie listr\n\nzsh:1: command not found: refgenie\n\n\nGenome data is fetched using the pull command:\nrefgenie pull hg38/bwa_index\nThe seek command displays the path of the downloaded file:\nrefgenie seek hg38/bwa_index\nList local genome assets:\nrefgenie list\nUse command substitution to store the genome path to a variable:\n# Retrieve the human reference genome\nrefgenie pull hg38/fasta\n\n# Save path of reference genome to a variable\nREF=$(refgenie seek hg38/fasta)\nThen use the resulting path in downstream tools:\n# Generate statistics for the human reference genome\nseqkit stats ${REF}\nSubscribe to the iGenomes server which hosts additional reference genomes and genome assets.\nrefgenie subscribe -s http://igenomes.databio.org/"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html#using-genomepy",
    "href": "tutorials/retrieving-biological-data/index.html#using-genomepy",
    "title": "Retrieving Biological Data",
    "section": "Using genomepy",
    "text": "Using genomepy\n\nHow to use genomepy\ngenomepy is another tool designed for searching and downloading genomic data. It can be used to:\n\nsearch available data\nshow the available metadata\nautomatically download, preprocess\ngenerate optional aligned indexes\n\nCurrently, genomepy supports Ensembl, UCSC, NCBI, and GENCODE.\n\n\n\n\n\n\nflowchart LR\n  genomepy[\"`**genomepy**`\"]\n  commands{\"`**search**\n  **install**\n  **annotation**`\"}\n  storage[\"`files stored in\n  **$home/local/share/genomes**`\"]\n  \n  genomepy --&gt; commands --&gt; storage\n\n\n\n\n\n\n\nSee also: genomepy documentation\n\n\nInstallation\nInstall using micromamba:\nmicromamba install genomepy\nInstall using pip or pipx:\npipx install genomepy\n\n\nUsing genomepy\nUse the search command to query genomes by name or accession:\ngenomepy search ecoli &gt; ecoli_query_results.txt\nA genome index will be downloaded upon invoking the search command for the first time. Hence, the initial search may take a while depending on your connection speed. As seen from the log below, assembly summaries are fetched from multiple databases (GENCODE, UCSC, Ensembl, NCBI).\n05:28:31 | INFO | Downloading assembly summaries from GENCODE\n05:29:54 | INFO | Downloading assembly summaries from UCSC\n05:30:05 | INFO | Downloading assembly summaries from Ensembl\n05:30:43 | INFO | Downloading assembly summaries from NCBI, this will take a while...\ngenbank_historical: 73.0k genomes [00:06, 11.1k genomes/s]\nrefseq_historical: 85.6k genomes [00:05, 16.6k genomes/s]\ngenbank: 2.39M genomes [02:11, 18.1k genomes/s]\nrefseq: 378k genomes [00:28, 13.0k genomes/s] \nThe results look like so:\nname                 provider accession         tax_id annotation species                                  other_info                              \n                                                        n r e k   &lt;- UCSC options (see help)                                                       \nEcoliT22_2.0         NCBI     GCF_000247665.3      562     âœ“      Escherichia coli O157:H43 str. T22       BAYGEN                                  \nEcoli.O104:H4.LB226692_2.0 NCBI     GCA_000215685.3      562     âœ“      Escherichia coli O104:H4 str. LB226692   Life Technologies                       \nEcoli.O104:H4.01-09591_1.0 NCBI     GCA_000221065.2      562     âœ“      Escherichia coli O104:H4 str. 01-09591   Life Technologies                       \nEcoli_C227-11_1.0    NCBI     GCA_000220805.2      562     âœ“      Escherichia coli O104:H4 str. C227-11    PacBio                                  \necoli009             NCBI     GCA_900607665.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli006             NCBI     GCA_900607465.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli008             NCBI     GCA_900607535.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli017             NCBI     GCA_900608025.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli025             NCBI     GCA_900608175.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli022             NCBI     GCA_900608105.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli015             NCBI     GCA_900607975.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL         \necoli013             NCBI     GCA_900607805.1      562     âœ“      Escherichia coli                         BIOZENTRUM, UNIVERSITY OF BASEL       \nEntries under the name field can be used to download the genome:\ngenomepy install ecoli009\nBy default, the downloaded genomes will be found in the ~/.local/share/genomes directory. For our example, the directory named ecoli009 contains the genome data and other relevant files:\n\n\n/home/dagsdags/.local/share/genomes\nâ””â”€â”€ ecoli009\n    â”œâ”€â”€ assembly_report.txt\n    â”œâ”€â”€ ecoli009.fa\n    â”œâ”€â”€ ecoli009.fa.fai\n    â”œâ”€â”€ ecoli009.fa.sizes\n    â”œâ”€â”€ ecoli009.gaps.bed\n    â””â”€â”€ README.txt\n\n1 directory, 6 files"
  },
  {
    "objectID": "tutorials/retrieving-biological-data/index.html#how-to-get-fastq-data",
    "href": "tutorials/retrieving-biological-data/index.html#how-to-get-fastq-data",
    "title": "Retrieving Biological Data",
    "section": "How to get FASTQ data",
    "text": "How to get FASTQ data\nPublibashed FASTQ files are stored in the bashort Read Archive (SRA). Access to SRA can be diagrammed like so:\n\n\n\n\n\n\nflowchart LR\n  fq[\"`**FASTQ FILES**`\"]\n  srr[\"`**SRR number**`\"] --&gt; srr2[\"`Find URL and metadata\n  web, **bio**, **ffq**`\"]\n  sra[\"`**SRA**\n  bashort Read Archive`\"] --&gt; sra2[\"`Use SRR number\n  **fastq-dump**`\"] --&gt; fq\n  ensembl[\"`**Ensembl**\n  Sequence archive`\"] --&gt; ensembl2[\"`Find URL\n  **curl**, **wget**, **aria2**`\"]\n  com[\"`**Commercial**\n  Google, Amazon\n  Users pay to download`\"] --&gt; com2[\"`Custom tools\n  **gsutil**, **aws**`\"] --&gt; fq\n\n\n\n\n\n\n\nThe sratools suite from NCBI provides fastq-dump and fasterq-dump to download read data from SRA accessions. In later versions of sratools, fasterq-dump is the preferred tool for fetching read data as demonstrated below:\n# Store accession number and number of reads\nACC=SRR1553425\nN=10000\n\n# Create reads directory\nmkdir reads\n\n# Fetch reads from accession\nfasterq-dump --split-3 -X ${N} -O reads ${ACC}\nHowever this method is clunky and fragile, often failing to fetch the required data due to errors that are cryptically communicated to the user. An alternative method is to retrieve the URLs that point to the data and download locally using wget, curl or aria2. Use bio search to retrieve metadata on the SRA accession and parse using jq.\n\n! bio search SRR1553425 | jq -r '.[].fastq_url[]'\n\nhttps://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_1.fastq.gz\nhttps://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/005/SRR1553425/SRR1553425_2.fastq.gz\n\n\n\nUsing the SRA Explorer\nThe SRA Explorer is a web-based tool developed by Phil Lewis aimed to make SRA data more accessible. It allows you to search for datasets and view metadata. The link can be accessed here:\n\nhttps://sra-explorer.info/\n\n\n\nUsing the NCBI website\nYou can also visit NCBIâ€™s SRA repository here to download sequencing read data.\n\n\nHow to download multiple runs\nAll data from a project can be queried using bio search, parsed using csvcut, and concurrently downloaded using parallel or aria2c:\nThe project id encapsulates all the details in a sequencing experiment. Pass the project id as an argument to the bio search command to view the SRR accessions.\n# Access the project metadata and save as a CSV file\nbio search PRJNA257197 --csv &gt; project.csv\nThe truncated output is as follows:\n\n\nSRR1553426,SAMN02951957,EM110,,2015-06-05,Sierra Leone,Zaire ebolavirus,156165683;174523161,494259458,2446829,EM110.FCH9,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/006/SRR1553426/SRR1553426_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/006/SRR1553426/SRR1553426_2.fastq.gz']\",\"156 MB, 175 MB files; 2.4 million reads; 494.3 million sequenced bases\"\nSRR1553432,SAMN02951960,EM113,,2015-06-05,Sierra Leone,Zaire ebolavirus,36110922;36939803,97376524,482062,EM113.FCH9,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/002/SRR1553432/SRR1553432_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/002/SRR1553432/SRR1553432_2.fastq.gz']\",\"36 MB, 37 MB files; 0.5 million reads; 97.4 million sequenced bases\"\nSRR1553453,SAMN02951971,G3676.2,,2015-06-05,Sierra Leone,Zaire ebolavirus,1103336;1123617,3329364,16482,G3676.2_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/003/SRR1553453/SRR1553453_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/003/SRR1553453/SRR1553453_2.fastq.gz']\",\"1 MB, 1 MB files; 0.0 million reads; 3.3 million sequenced bases\"\nSRR1553457,SAMN02951973,G3677.2,,2015-06-05,Sierra Leone,Zaire ebolavirus,804421;797003,2334110,11555,G3677.2_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/007/SRR1553457/SRR1553457_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/007/SRR1553457/SRR1553457_2.fastq.gz']\",\"804 KB, 797 KB files; 0.0 million reads; 2.3 million sequenced bases\"\nSRR1553469,SAMN02951979,G3687.1,,2015-06-05,Sierra Leone,Zaire ebolavirus,2227541;2317710,6095552,30176,G3687.1_r1.ADXX,RNA-Seq,TRANSCRIPTOMIC,PAIRED,ILLUMINA,Illumina HiSeq 2500,Zaire ebolavirus Genome sequencing,\"['https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/009/SRR1553469/SRR1553469_1.fastq.gz', 'https://ftp.sra.ebi.ac.uk/vol1/fastq/SRR155/009/SRR1553469/SRR1553469_2.fastq.gz']\",\"2 MB, 2 MB files; 0.0 million reads; 6.1 million sequenced bases\"\n\n\nOnly the accession numbers are needed to download the reads. From the project file, we extract the first column corresponding to the accession, and use this as input to fastq-dump. The parallel tool enables us to simultaneously download multiple accession at once.\n# Extract the first column and download concurrently using parallel\n1cat project.csv | \\\n2    csvcut -c 1 | \\\n3    head -n 3 | \\\n4    parallel \"fastq-dump -F --split-files -O data {}\"\n\n1\n\nPrint to standard output.\n\n2\n\nFilter only the first column.\n\n3\n\nFilter first three rows.\n\n4\n\nDownload reads for each of the three accessions."
  },
  {
    "objectID": "notebook.html",
    "href": "notebook.html",
    "title": "Notebook",
    "section": "",
    "text": "Retrieving Biological Data\n\n\n\n\n\n\nCLI\n\n\nAPI\n\n\n\nTools for downloading genomic data using the command line.\n\n\n\n\n\nJul 23, 2024\n\n\nJan Emmanuel Samson\n\n\n\n\n\n\nNo matching items"
  }
]