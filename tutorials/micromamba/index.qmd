---
title: Getting Started with Micromamba
author: Jan Emmanuel Samson
email: jgsamson@up.edu.ph
date: "October 3, 2024"
description: "Setting up local environments to support reproducible workflows in Bioinformatics."
categories:
  - CLI
  - Containerization
image: ../../assets/mamba-logo.png
toc: true
---

## What is Micromamba?

[Micromamba](https://mamba.readthedocs.io/en/latest/installation/micromamba-installation.html) is a package manager used to install programs in their own isolated environments. It is a light-weight, standalone version of **Mamba** written purely in C++. Upon installation, the main executable can be accessed by running the `micromamba` command.

## A Primer on Using Micromamba

### Terminology

::: {layout-ncol=2}

::: {.column}

Prefix
: A fully self-contained and portable installation.

Environment
: Another name for a _target prefix_.

Activation
: The _activation_ of an environment makes all its contents available to your shell.

:::

Deactivation
: The deactivation is the opposite operation of activation, remove from your shell what makes the environment content accessible.

Packages Repository
: A generic way to describe a storage location for software packages; also called repo.

Channel
: An independent and isolated repo structure that is used to classify and administrate more easily a packages server.

:::


### Installing Micromamba

For **macOS** users, `micromamba` can be installed using Homebrew:

```bash
brew install micromamba
```

For **Linux** users, run the following command:

```bash
"${SHELL}" <(curl -L micro.mamba.pm/install.sh)
```

For **Windows Powershell**, invoke:

```bash
Invoke-Expression ((Invoke-WebRequest -Uri https://micro.mamba.pm/install.ps1).Content)
```

After installation, we make sure that we have an updated version of the software by invoking:

```bash
micromamba self-update
```

If you encountered an error during installation, refer to micromamba's [troublshooting page](https://mamba.readthedocs.io/en/latest/user_guide/troubleshooting.html) for a list of common errors.

::: {.callout-note}
# Try it out
Invoke `micromamba` with the `-h` or `--help` flag to view all available subcommands.
:::

### Configuration

There are two ways to configure the behavior of micromamba in your current system. The first method is to generate a text file containing all the configurations in [YAML](https://en.wikipedia.org/wiki/YAML) format. This file is often suffixed as `.mambarc` or `.condarc`. The second, more simpler method is to update the current configuration through the CLI. This is what we'll be doing for setting up our environment.

Since we are concerned with installing bioinformatics packages, we need to add the **bioconda** channel which is simply an online repository where we will fetch our programs. We will also add the **conda-forge** channel as an alternative source of packages. 

::: {.column-margin}
For a full list of all availble tools hosted in bioconda, consult the following sites:

- [Bioconda Package Index](https://bioconda.github.io/conda-package_index.html)
- [Bioconda Packages (Anaconda)](https://anaconda.org/bioconda/repo)
:::

Run the following two commands:

```bash
micromamba config --add channels bioconda
micromamba config --add channels conda-forge
```

Next, we will tell micromamba to first look at the bioconda channel before querying the conda-forge channel when downloading packages:

```bash
micromamba config --set channel_priority strict
```

We can view our current configuration as follows:

```bash
micromamba config list
```

It should output something like this:

```yaml
channels:
  - bioconda
  - conda-forge
channel_priority: strict
```

### Creating a Local Environment

The benefit of using micromamba is that it allows us to create isolated environments. As such, software packages that conflict with one another can be run concurrently in the same system. In the case of bioinformatics workflows, packages that have many dependencies often cause other packages to fail. To create a new environment, we invoke the `create` subcommand:

```bash
micromamba create -n <environment_name>
```

The `-n` flag (short for `--name`) tells the program to label our environment as \<environment_name\>. As a good practice, keep the name short and descriptive.

After creating the environment, we need to activate it by invoking the `activate` subcommand followed by the environment name:

```bash
micromamba activate <environment_name>
```

We are now in the current environment! This should be reflected by a change in the shell prompt. To exit the environment, simply run:

```bash
micromamba deactivate
```

### Installing Packages

Now that we are in our newly-created environment, we can now install packages that are only installed within the current activated environment. The command for installing packages is:

```bash
micromamba install -c <channel_name> <package_name>
```

The `-c` command tells the program which channel we want to retrieve the packages to be installed. If not specified, micromamba will refer back to the channel priority in the configuration file. Package names are given as positional arguments. Multiple packages can be downloaded at once by listing all package names separated by whitespaces. Additionally, package vesions can be specified as follows:

```bash
# Download a specific version of the package
micromamba install -c conda-forge python=3.12.0
# Download multiple packages at once
micromamba install -c bioconda mafft raxml
# Another way to install packages
micromamba install bioconda::mafft bioconda::raxml
```

::: {.column-margin}

::: {.callout-tip}
Micromamba can also be used for managing Python packages from PIP, as well as R packages from CRAN.
:::

:::

List currently install packages:

```bash
micromamba list
```

## Setting Up Our BIOINFO 221 Environment

For the second hands-on session, we would need the following programs:

::: {.center}

|Program|Version|Function|Link|
|----|---|------|--------------|
|SPAdes|3.15.5|Assembler|https://github.com/ablab/spades|
|QUAST|5.0.2|Assembly QA|https://github.com/ablab/quast|
|Bowtie2|2.5.4|Read Mapper|https://bowtie-bio.sourceforge.net/bowtie2/index.shtml|
|GATK|4.3.0.0|Preprocessing, Variant Calling|https://gatk.broadinstitute.org/hc/en-us|
|SnpEff|5.2|Variant Annotation|https://pcingola.github.io/SnpEff/|

: {.hover}

:::


::: {.grid .text-center .list}

::: {.g-col-4}
1/3 of the page
:::

::: {.g-col-8}
This column takes 2/3 of the page
:::

:::

::: {.column-margin}
Refer to the following links for documentation:

1. [SPAdes](https://ablab.github.io/spades/)
2. [QUAST](https://quast.sourceforge.net/docs/manual.html)
3. [Bowtie2](https://bowtie-bio.sourceforge.net/bowtie2/manual.shtml)
4. [GATK](https://gatk.broadinstitute.org/hc/en-us/articles/360036194592-Getting-started-with-GATK4)
5. [SnpEff](https://pcingola.github.io/SnpEff/snpeff/introduction/)
:::

All of these tools are available at the bioconda repository. First, create a new environment. I'll name it `bioinfo221` but you can name it whatever you want.

```bash
micromamba create -n bioinfo221
```

Next, activate the environment.

```bash
micromamba activate bioinfo221
```

Then install all the packages from the bioconda channel. Make sure to separate the package names using whitespaces.

```bash
micromamba install -c bioconda spades quast bowtie2 gatk4 snpeff
```

If you try to install the latest version of each tool, package dependencies will clash with one another. By not specifying the versions, micromamba automatically resolves the versioning of each tool, making sure that one plays well with the others. We can now verify that each tool is installed properly in our system by running their base command.

```bash
spades.py --help
quast --help
gatk --help
snpEff --help
bowtie2 --help
```

### A More Reproducible Way to Create an Environment

1. Create a YAML file containing the environment name, channels, and packages.

```{.yaml filename="env.yml"}
name: bioinfo221
channels:
  - bioconda
  - conda-forge
dependencies:
  - openjdk=11.0.1
  - spades
  - quast
  - gatk
  - snpeff
  - bowtie2
```

2. Create a micromamba environment from the YAML file using `env create`, making to to specify the `-f` or `--file` flag.

```bash
micromamba env create -f env.yml
```

3. Activate the environment and install additional packages.

```bash
micromamba activate bioinfo221
micromamba install -c bioconda mafft raxml
```

4. Export the updated environment using `env export`.

```bash
micromamba env export > updated_env.yml
```

The newly installed packages (mafft, raxml) are now reflected in the new YAML file (updated_env.yml). This is a simple text file that can be sent to other collaborators, allowing them to easily reproduce the environment used for analysis.
