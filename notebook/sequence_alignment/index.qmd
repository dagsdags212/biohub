---
title: Local and Global Sequence Alignment
author: Jan Emmanuel Samson
date: 2024/08/27
description: Find highly conserved regions in biological strings using techniques in dynamic programming.
categories:
  - Algorithms
  - Alignment
image: assets/cover.png
toc: true
execute:
  freeze: true  
---

# Sequence Alignment

Sequence alignment is the process of finding the optimal overlap between two strings with the goal of
minimizing a distance metric. Distance is usually measured as:

Hamming distance
: The minimum number of **base substitutions** needed to convert one string into another.

Edit distance
: The minimum number of **mutations** (substitutions, insertions, deletions) needed to convert one string into 
another. Also known as the *Levenshtein* distance.

::: {.center}

<p class="wide mb-0">S: <i>TAGACCCCAC</i></p>
<p class="wide">T: <i>TAACCCCACC</i></p>

---

:::

Given strings *S* and *T* of equal length, we can confirm that the hamming distance is equal to 4 by 
counting the number of subsitutions needed to convert string *S* to *T* or vice versa:

::: {.center}

<p class="wide mb-0">S: <i>TA<span class="red">GA</span>CCC<span class="red">CA</span>C</i></p>
<p class="wide">T: <i>TA<span class="blue">AC</span>CCC<span class="blue">AC</span>C</i></p>

---

:::

If we expand our edits to insertions or deletions, less work is needed to convert *S* to *T*. This is 
demonstrated by calculating the edit distance, which in our example is equal to **2**:

::: {.center}

<p class="wide mb-0">S: <i>TA<span class="blue">G</span>ACCCCAC<span class="red">-</span></i></p>
<p class="wide">T: <i>TA<span class="red">-</span>ACCCCAC<span class="blue">C</span></i></p>

---

:::


In the context of biology, alignment is done to find regions of high sequence similarity. If two genetic
regions are similar or identical, sequence alignment can demonstrate the conserved elements or differences
betweenthem. Sequence alignment is usually categorized as either being **local** or **global** depending 
on the scope. Global alignment aims for *end-to-end* pairing (*think genome-to-genome comparisons*) while
local alignment limits the overlap betweensubstrings of two larger strings (*think gene-to-gene comparisons*).

::: {#fig-alignments layout-ncol=2}

![Local Alignment](https://bio.libretexts.org/@api/deki/files/28370/page66image65266624.png?revision=1)

![Global Alignment.](https://bio.libretexts.org/@api/deki/files/28393/page66image65266832.png?revision=1)

:::

The two types of alignment can be visualized in @fig-alignments. A 2-dimensional matrix is generated from 
the bases that compose the two aligned strings. The x-axis contains the conitugous bases of string *S* while 
the y-axis stores that of string *T*. <span class="blue">Blue</span> highlights point to regions of similarity
and the path(s) derived by connecting the blue points shows an optimal alignment between regions of the 
two strings.

## Dynamic Programming

Biological sequences can be represented as a series of characters thus we can interpret local alignment as a
string comparison problem. A well-known approach in solving such problem us through the use of **dynamic
programming** where we attempt to break down the task into smaller subproblems and build an optimal solution
from smaller solutions. This approach is preferable when problems have:

1. Optimal substructure
: The optimal solution to an instance of the problem contains optimal solutions to subproblems.

2. Overlapping subproblems
: There are a limited number of subproblems thus ensuring tractability. Many, if not most, subproblems are
repeated multiple times.

Like greedy algorithms, dynamic programming is used to solve optimization problems. Unlike greedy algorithms,
dynamic programming works on a range of problems in which locally optimal choices do not necessarily produce
globally optimal results. In practice, solving a problem using dynamic programming involves two main parts: 
(1) the setup portion followed by (2) performing computation. Setting up can be generalized in five steps:

1. Find a 'matrix' parameterization of the problem and determin the number of variables/dimensions.
2. Ensure the subproblem space is polynomial, not exponential.
3. Determine an effective traversal order by allowing easy access to the solutions of subproblems when needed.
4. Identify a recursive formula and define its base case.
5. Remember choices (solutions to subproblems).

After the set-up is complete, we proceed to computation which is fairly straightforward:

- Systematically fill in the table of results and find an optimal score.
- Traceback from the optimal score through the pointers to determine an optimal solution.

In the folllowing sections, we'll illustrate dyanamic programming by exploring a few foundational alignment
algorithms.

## Local Alignment

Local alignment is usually done to compare highly conserved regions such as genes and motifs. These regions
may indicate functional, structural, and/or evolutionary relationships between two biological sequences. 
One application of local alignment is the detection of chromosomal rearrangements within the sequenced DNA sample.

![Local alignments to detect rearrangements.](https://bio.libretexts.org/@api/deki/files/28303/page66image65205664.png?revision=1)



### Smith-Waterman

First proposed in 1981, the Smith-Waterman algorithm performs local sequence alignment between two biological
strings to find regions of similarity. This method can be outlined in four steps:

1. Generation of Scoring Scheme
: A substion matrix maps each pair of base/amino acid subsitution with a score for matches and mismatches.
Additionally, a gap penalty is used to determine the score for opening or extendings gaps within an alignment.

2. Matrix Initialization
: Given string *S* of length *m* and string *T* of length *n*, we initialize an (m+1) x (n+1) matrix, filling
in the first row and first column with zeros.

3. Scoring
: Elements of the matrix are scored from left-to-right, top-to-bottom. The score of succeeding elements depend
on the values of previously-computed cells. Only non-negative values are allowed in the matrix; this is an 
important property that allows for LOCAL alignment.

4. Traceback
: Upon filling up the matrix with appropriate scores, we identify the element with the highest score and draw
a path that connects high-scoring alignments until a zero is reached.

---

**To illustrate how the algorithm works, let us go through a simple example.** 

I will be using the example DNA strings above where $S = \text{TAGACCCCAC}$ and $T = \text{TAACCCCACC}$.

#### Step 1. Creating a simple substitution matrix.

---

A simple scoring scheme can be devised by following two rules:

- A <span class="blue">match</span> gets a score of +3
- A <span class="red">mismatch</span> gets a score of -3

This can be represented as either a function:

$$
\begin{equation}
  s(a_i, b_j) = 
  \left\{
    \begin{array}{l}
      +3, && a_i = b_j \\ 
      -3, && q_i \ne b_j
    \end{array}
  \right.
\end{equation}
$$

or a substitution matrix:

|   | A | C | G | T |
| - | - | - | - | - |
| A | +3| -3| -3| -3|
| C | -3| +3| -3| -3|
| G | -3| -3| +3| -3|
| T | -3| -3| -3| +3|

For amino acid substitutions, we often use the [PAM](https://en.wikipedia.org/wiki/Point_accepted_mutation) 
and [BLOSUM](https://en.wikipedia.org/wiki/BLOSUM) schemes.

In addition to substitution pairs, we introduce a gap penalty for scoring the opening or extension of gaps 
(or indels). A **linear** gap penalty assigns gap openings and extensions with the same score. An **affine** 
gap penality uses different scores for gap openings and gap extensions, imposing a larger initial cost for 
opening a gap and a small incremental cost for each gap extension. Additionally, a **general** gap penalty
allow for any cost function while a **frame-aware** gap penalty takes into consideration disruptions to the
coding frame when specifying the cost function.

For the sake of simplicity, we will use a modified linear scheme based on the [EMBOSS Water](http://www.ebi.ac.uk/Tools/psa/emboss_water/) tool where gaps are penalized by subtracting **10** from the score.

#### Step 2. Initializing the matrix.

---

Generate an empty matrix **M** with **(m+1) rows** and **(n+1) columns** where *m* is the length of *S* and *n*
is the length of *T*. 

An extra row/column is needed to represent the starting point where $i=0$, $j=0$, and $F(i, j)=0$. After
creating matrix *M*, set the value of each element of the first row and column to 0. 

More formally, given a gap penalty *d*, we set $F_{i,0} = -i × d$ and $F_{0,j} = -j × d$. The starting matrix 
is illustrated below:

```{python}
#| label: tbl-initial-matrix
#| tbl-cal: Initialized Matrix
#| echo: false
import pandas as pd
# from IPython.display import Markdown, display

S = " " + "TAGACCCCAC"
T = " " + "TAACCCCACC"

df = pd.DataFrame(columns=[b for b in S], index=[b for b in T]).fillna("-")
df.iloc[0, :] = 0
df.iloc[:, 0] = 0

# display(Markdown(df.to_markdown(index=True)))
df
```

#### Step 3. Compute alignment scores.

---

First label the **origin** as the element located at ($i=1$, $j=1$). Then consider the four possibilities when
moving across the alignment:

- Sequence *S* has a gap at the current alignment position.
- Sequence *T* has a gap at the current alignment position.
- A nucleotide substitution has occured at the current position, resulting to a mismatch.
- There is a match at the current position.

All four scenarios can be encapsulated in a single formula as stated below:


$$
\begin{equation}
  F(i, j) = max 
  \left\{
    \begin{array}{l}
      F(i-1, j) - d, && \text{insert gap in S} \\ 
      F(i, j-1) - d, && \text{insert gap in T} \\ 
      F(i-1, j-1) + s(S_i, T_j), && \text{base substitution} \\ 
    \end{array}
  \right.
\end{equation}
$$

When traversing the matrix, a downwards shift would indicate a gap introduced at string *S* while a 
rightward shift would introduce a gap at string *T*. Hence, movement from either direction would incur a 
**gap** penalty. On the other hand, a diagonal movement would implicate either a **match** or a **mismatch**.
For this, we consult our substitution matrix and update the score of the current element accordingly.

For the first element at (1, 1), we compare the scores derived from moving downwards ($↓$), rightwards ($→$),
and diagonally ($↘$):

- Moving $↓$ would incur a gap penalty of -10
- Moving $→$ would also incur a gap penalty of -10
- Moving $↘$ would incur a mismatch penalty of -3

Decide which direction to follow by choosing that path that would yield the lowest penalty. By moving 
diagonally, we maximize the score by taking a 'hit' of -3 as compared to the alternative of -10. Take note that
a score cannot go below 0, hence we take the maximum between the incurred penalty and zero. To illustrate this
step, we update the score at position (1, 1) as follows:


$$
F_{\text{0,0}} = F(0, 0) = 0
$$

$$
F_{1,1} = min(0, F_{0,0} -3) = 0
$$

Repeating the same logic for the first 3 rows and columns would yield the following matrix:

```{python}
#| echo: false
df.iloc[1, 1] = 3
df.iloc[1, 2:4] = 0
df.iloc[2, 1] = 0
df.iloc[2, 2] = 6
df.iloc[2, 3] = 0
df.iloc[3, 1] = 0
df.iloc[3, 2] = 0
df.iloc[3, 3] = 3

df
```

<br>

The completed matrix is shown below:


```{python}
#| echo: false
df.iloc[1, :] = 0
df.iloc[1, 1] = 3
df.iloc[2, :] = [0, 0, 6, 0, 3, 0, 0, 0, 0, 0, 0]
df.iloc[3, :] = [0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0]
df.iloc[4, :] = [0, 0, 0, 0, 0, 6, 3, 3, 3, 0, 3]
df.iloc[5, :] = [0, 0, 0, 0, 0, 3, 9, 6, 6, 0, 3]
df.iloc[6, :] = [0, 0, 0, 0, 0, 3, 6, 12, 9, 3, 3]
df.iloc[7, :] = [0, 0, 0, 0, 0, 3, 6, 9, 15, 6, 6]
df.iloc[8, :] = [0, 0, 0, 0, 3, 0, 0, 3, 6, 18, 3]
df.iloc[9, :] = [0, 0, 0, 0, 0, 6, 0, 0, 0, 3, 21]
df.iloc[10, :] = [0, 0, 0, 0, 0, 3, 9, 3, 3, 0, 6]

df
```


#### Step 4. Finding the optimal alignment.

---

First locate the element with the largest score. This will serve as the start of the backtrace.

In our example, the maximum occurs at position (9, 10) where the score is **21**. We then start the backtracking
by looking at the scores of the neighbors and following the one with the highest score. We continue this until
we're we encounter a zero.

Following the path would lead to the following alignment:

::: {.center}

<p class="wide mb-0">S: <i><span class="blue">TAGACCCCAC</span></i></p>
<p class="wide">T: <i><span class="blue">TAG</span><span class="red">-</span><span class="blue">CCCCAC</span></i></p>

:::

### Implementing Smith-Waterman

## Global Alignment

### Needleman-Wunsch

The Needleman-Wunsch algorithm is used for the global alignment of biological strings. The technique pre-dates
the Smith-Waterman algorithm and actually serves as the basis of their implementation. The key difference 
between the techniques is in how the subsitutions matrix is created. Smith-Waterman does not allow for negative
scores while Needleman-Wunsch does, hence extending its capability to align two sequences from end-to-end.

The algorithm also follows four general steps:

1. Choosing a scoring scheme.
: Follows the same principle as Smith-Waterman.

2. Initializing the matrix.
: Follows the same principle as Smith-Waterman.

3. Computing alignment scores.
: Mostly follows the same system as Smith-Waterman, but allows for negative scores.

4. Path backtracking.
: Backtracking always starts at the last element of the matrix. We only stop extending the path when we reach
the origin at position (0,0).

#### Generating matrix and computing scores

---

**Using the reference strings and scoring schemes from the previous example, we generate a scoring matrix as
follows:**

```{python}
#| echo: false
df.iloc[0, :] = [-10 * i for i in range(len(S))]
df.iloc[:, 0] = [-10 * i for i in range(len(T))]
df.iloc[1, 1:] = [3, -7, -17, -27, -37, -47, -57, -67, -77, -87]
df.iloc[2, 1:] = [-7, 6, -4, -14, -27, -37, -47, -57, -67, -77]
df.iloc[3, 1:] = [-17, -4, 3, -1, -11, -22, -33, -44, -54, -64]
df.iloc[4, 1:] = [-27, -14, -7, 0, 2, -8, -18, -28, -38, -48]
df.iloc[5, 1:] = [-37, -24, -17, -10, 3, 5, -5, -15, -25, -35]
df.iloc[6, 1:] = [-47, -34, -27, -20, -7, 6, 8, -2, -12, -22]
df.iloc[7, 1:] = [-57, -44, -37, -30, -17, -4, 9, 11, 1, -9]
df.iloc[8, 1:] = [-67, -54, -47, -34, -27, -14, -1, 6, 14, 4]
df.iloc[9, 1:] = [-77, -64, -57, -44, -37, -24, -11, 2, 4, 17]
df.iloc[10, 1:] = [-87, -74, -67, -54, -41, -34, -21, -2, -6, 7]

df
```

#### Backtracking

---

As stated earlier, we start the backtracing procedure from the last element of the matrix. We then greedily
choose the direction pointing towards the highest-scoring neighbor. We repeat this process until we reach
the origin.

The path corresponds to the following sequence of scores:

$$
7 → 17 → 14 → 11 → 9 → 8 → 6 → 5 → 3 → 0 → 3 → 6 → 3
$$

Which can be represented as the following optimal global alignment:

::: {.center}

<p class="wide mb-0">S:
  <i>
  <span class="blue">TAGA</span>
  <span class="red">C-C-C</span>
  <span class="blue">CA</span>
  <span class="red">-</span>
  <span class="blue">C</span>
  </i>
</p>
<p class="wide">T:
  <i>
  <span class="blue">TAGA</span>
  <span class="red">-C-C-</span>
  <span class="blue">CA</span>
  <span class="red">C</span>
  <span class="blue">C</span>
  </i>
</p>

:::
